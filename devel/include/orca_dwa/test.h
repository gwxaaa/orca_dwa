// Generated by gencpp from file orca_dwa/test.msg
// DO NOT EDIT!


#ifndef ORCA_DWA_MESSAGE_TEST_H
#define ORCA_DWA_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace orca_dwa
{
template <class ContainerAllocator>
struct test_
{
  typedef test_<ContainerAllocator> Type;

  test_()
    : data()
    , vel(0.0)
    , Pose()
    , name()  {
    }
  test_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , vel(0.0)
    , Pose(_alloc)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _data_type;
  _data_type data;

   typedef float _vel_type;
  _vel_type vel;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _Pose_type;
  _Pose_type Pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::orca_dwa::test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orca_dwa::test_<ContainerAllocator> const> ConstPtr;

}; // struct test_

typedef ::orca_dwa::test_<std::allocator<void> > test;

typedef boost::shared_ptr< ::orca_dwa::test > testPtr;
typedef boost::shared_ptr< ::orca_dwa::test const> testConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::orca_dwa::test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::orca_dwa::test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::orca_dwa::test_<ContainerAllocator1> & lhs, const ::orca_dwa::test_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.vel == rhs.vel &&
    lhs.Pose == rhs.Pose &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::orca_dwa::test_<ContainerAllocator1> & lhs, const ::orca_dwa::test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace orca_dwa

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::orca_dwa::test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orca_dwa::test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orca_dwa::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orca_dwa::test_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orca_dwa::test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orca_dwa::test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::orca_dwa::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4acae7a53bf51d961922b3ffd639adff";
  }

  static const char* value(const ::orca_dwa::test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4acae7a53bf51d96ULL;
  static const uint64_t static_value2 = 0x1922b3ffd639adffULL;
};

template<class ContainerAllocator>
struct DataType< ::orca_dwa::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "orca_dwa/test";
  }

  static const char* value(const ::orca_dwa::test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::orca_dwa::test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] data \n"
"float32 vel\n"
"geometry_msgs/Pose Pose\n"
"string name\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::orca_dwa::test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::orca_dwa::test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.vel);
      stream.next(m.Pose);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orca_dwa::test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::orca_dwa::test_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "Pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.Pose);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORCA_DWA_MESSAGE_TEST_H
